#BlueJ class context
comment0.target=Vehicle
comment0.text=\r\n\ This\ is\ the\ superclass\ for\ Vehicles.\r\n\ \r\n
comment1.params=
comment1.target=boolean\ checkHitPedestrian()
comment10.params=
comment10.target=boolean\ shouldChangeLane()
comment11.params=
comment11.target=void\ changeLane()
comment11.text=\r\n\ The\ superclass\ Vehicle's\ act()\ method.\ This\ can\ be\ called\ by\ a\ Vehicle\ subclass\ object\ \r\n\ (for\ example,\ by\ a\ Car)\ in\ two\ ways\:\r\n\ -\ If\ the\ Vehicle\ simply\ does\ NOT\ have\ a\ method\ called\ public\ void\ act(),\ this\ will\ be\ called\r\n\ \ \ instead.\ \r\n\ -\ subclass'\ act()\ method\ can\ invoke\ super.act()\ to\ call\ this,\ as\ is\ demonstrated\ here.\r\n
comment12.params=lane
comment12.target=int\ getLaneY(int)
comment13.params=laneNumber
comment13.target=boolean\ isValidLaneNumber(int)
comment14.params=
comment14.target=void\ act()
comment15.params=
comment15.target=boolean\ checkEdge()
comment15.text=\r\n\ A\ method\ used\ by\ all\ Vehicles\ to\ check\ if\ they\ are\ at\ the\ edge.\r\n\ \r\n\ Note\ that\ this\ World\ is\ set\ to\ unbounded\ (The\ World's\ super\ class\ is\ (int,\ int,\ int,\ FALSE)\ which\ means\r\n\ that\ objects\ should\ not\ be\ stopped\ from\ leaving\ the\ World.\ However,\ this\ introduces\ a\ challenge\ as\ there\r\n\ is\ the\ potential\ for\ objects\ to\ disappear\ off-screen\ but\ still\ be\ fully\ acting\ and\ thus\ wasting\ resources\r\n\ and\ affecting\ the\ simulation\ even\ though\ they\ are\ not\ visible.\r\n
comment16.params=
comment16.target=void\ repelPedestrians()
comment17.params=nearbyObjects\ minDistance
comment17.target=void\ pushAwayFromObjects(java.util.ArrayList,\ double)
comment17.text=\r\n\ New\ repel\ method\!\ Seems\ to\ work\ well.\ Can\ be\ used\ in\ both\ directions,\ but\ for\ now\r\n\ commented\ out\ movement\ on\ x\ so\ players\ are\ only\ "repelled"\ in\ a\ y-direction.\r\n\ \r\n\ @author\ Mr\ Cohen\r\n\ @since\ February\ 2023\r\n
comment18.params=
comment18.target=void\ drive()
comment18.text=\r\n\ Method\ that\ deals\ with\ movement.\ Speed\ can\ be\ set\ by\ individual\ subclasses\ in\ their\ constructors\r\n\r\n\ \ \ \ public\ void\ drive()\ \r\n\ \ \ \ {\r\n\ \ \ \ //\ Ahead\ is\ a\ generic\ vehicle\ -\ we\ don't\ know\ what\ type\ BUT\r\n\ \ \ \ //\ since\ every\ Vehicle\ "promises"\ to\ have\ a\ getSpeed()\ method,\r\n\ \ \ \ //\ we\ can\ call\ that\ on\ any\ vehicle\ to\ find\ out\ it's\ speed\r\n\ \ \ \ Vehicle\ ahead\ \=\ (Vehicle)\ getOneObjectAtOffset\ (direction\ *\ (int)(speed\ +\ getImage().getWidth()/2\ +\ 6),\ 0,\ Vehicle.class);\r\n\ \ \ \ double\ otherVehicleSpeed\ \=\ -1;\r\n\ \ \ \ if\ (ahead\ \!\=\ null)\ {\r\n\r\n\ \ \ \ otherVehicleSpeed\ \=\ ahead.getSpeed();\r\n\ \ \ \ }\r\n\r\n\ \ \ \ //\ Various\ things\ that\ may\ slow\ down\ driving\ speed\ \r\n\ \ \ \ //\ You\ can\ ADD\ ELSE\ IF\ options\ to\ allow\ other\r\n\ \ \ \ //\ factors\ to\ reduce\ driving\ speed.\r\n\r\n\ \ \ \ if\ (otherVehicleSpeed\ >\ 0\ &&\ otherVehicleSpeed\ <\ maxSpeed){\ //\ Vehicle\ ahead\ is\ slower?\r\n\ \ \ \ speed\ \=\ otherVehicleSpeed;\r\n\ \ \ \ }\ else\ {\r\n\ \ \ \ speed\ \=\ maxSpeed;\ //\ nothing\ impeding\ speed,\ so\ go\ max\ speed\r\n\ \ \ \ }\r\n\r\n\ \ \ \ move\ (speed\ *\ direction);\r\n\ \ \ \ }\ \ \ \r\n
comment19.params=
comment19.target=boolean\ getIsSwitchingLanes()
comment2.params=cls\ x\ y
comment2.target=boolean\ isTouching(java.lang.Class,\ int,\ int)
comment20.params=destinationY\ speed
comment20.target=boolean\ checkSwitchedLeftLane(int,\ double)
comment21.params=destinationY\ speed
comment21.target=boolean\ checkSwitchedRightLane(int,\ double)
comment22.params=y
comment22.target=boolean\ putLeftLaneChecker(int)
comment23.params=y
comment23.target=boolean\ putRightLaneChecker(int)
comment24.params=
comment24.target=double\ getSpeed()
comment24.text=\r\n\ An\ accessor\ that\ can\ be\ used\ to\ get\ this\ Vehicle's\ speed.\ Used,\ for\ example,\ when\ a\ vehicle\ wants\ to\ see\r\n\ if\ a\ faster\ vehicle\ is\ ahead\ in\ the\ lane.\r\n
comment25.params=
comment25.target=int\ getActs()
comment3.params=origin
comment3.target=Vehicle(VehicleSpawner)
comment4.params=w
comment4.target=void\ addedToWorld(greenfoot.World)
comment4.text=\r\n\ This\ method\ is\ called\ automatically\ when\ the\ Vehicle\ is\ added\ to\ the\ World,\ and\ places\r\n\ the\ Vehicle\ just\ off\ screen\ (centered\ 100\ pixels\ beyond\ the\ center\ of\ the\ lane\ spawner)\r\n\ so\ it\ will\ appear\ to\ roll\ onto\ the\ screen\ smoothly.\r\n
comment5.params=origin\ laneNumber
comment5.target=Vehicle(VehicleSpawner,\ int)
comment6.params=
comment6.target=int\ getLaneNumber()
comment7.params=lane
comment7.target=java.util.List\ getVehiclesInLane(int)
comment8.params=laneNumber
comment8.target=boolean\ isLaneCongested(int)
comment9.params=
comment9.target=boolean\ isOpenLane()
numComments=26
